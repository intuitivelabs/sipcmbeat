################### Sipcmbeat Configuration Example #########################

############################# Sipcmbeat ######################################

sipcmbeat:
  # (very) verbose parser/ capture
  verbose: false
  # general log level: BUG -3, CRIT -2; ERR -1; WARN 0, NOTICE 1, INFO 2, DBG 3
  log_level: 2
  # log message options, flags:
  #    short filename:line - 1, long - 2, time stamp:  - 4,
  #    back trace short - 8, long - 16
  log_opt: 1
  # parse / capture log level (same values as log_level above)
  parse_log_level: 1
  # parse / capture log message options (same values as log_opt above)
  parse_log_opt: 4
  # read packets from pcap files instead of the network
  pcap: ""
  # replay packets from pcap keeping recorded delays between packets
  # (at the recorded "speed").
  replay: false
  # minimum delay when replaying pcaps, valid only in pcap replay mode
  replay_min_delay: 275ms
  # maximum delay when replaying pcaps, valid only in pcap replay mode
  replay_max_delay: 0
  # scale factor for inter packet delay intervals (0 means disabled)
  replay_scale: 0
  # keep web server running after the pcap file was fully "replayed"
  run_forever: false
  # interface to capture packets from
  iface: ""
  # capture buffer size in kb
  pcap_buf_kb: 4096  # 4Mb
  # berkley packet filter for capture
  bpf: ""
  # udp destination ports used fo vxlan (tunnel endpoint).
  # Packets arriving on these ports will be automatically decapsulated.
  # An empty lists means disabled. The standard vxlan port is 4789.
  vxlan_ports: []
  # tcp destination ports for websocket traffic.
  # Packets arriving on these ports are interpreted as HTTP and after
  # an HTTP Upgrade to websocket/sip as sip over websockets.
  websocket_ports: []
  # acme/oracle sbc ipfix collector listen address
  ipfix_addr: ""
  # acme/oracle sbc ipfix collector listen port, 0 for disabled
  ipfix_port: 0
  # port for the internal http server, 0 == disable
  http_port: 8080
  # listen address for the internal http server
  http_addr: "127.0.0.1"
  # tcp connections garbage collection interval
  tcp_gc_int: 20s
  tcp_reorder_timeout: 60s
  tcp_connection_timeout: 1800s
  # maximum time blocked waiting for packets and also
  # the maximum packet receive delay or timestamp error (for now)
  max_blocked_timeout: 250ms
  # maximum tracked calls (0 for unlimited)
  calls_max_entries: 0
  # maximum memory for keeping call state (0 for unlimited)
  calls_max_mem: 0
  # timeouts for each call state in the format { state_name: timeout, }
  # The timeout value is a duration (e.g. 10s or 1h30m) and it will be always
  # rounded down to seconds. A negative or zero value will cause the default
  # value to be used (no effect).
  # The state name are:
  #   inv_1st                   - first invite seen
  #   inv_early_dlg             - early dialog
  #   inv_neg                   - negative reply for invite based call seen
  #   inv_established           - call established
  #   inv_bye_seen              - bye detected
  #   inv_bye_repl              - bye replied
  #   inv_canceled              - call canceled
  #   non_inv_1st               - initial non-invite
  #   non_inv_neg               - non-invite negative reply
  #   non_inv_fin               - non-invite finished
  # E.g.:  {inv_1st: 30s, inv_early_dlg: 2m, inv_established: 2h}
  calls_timeouts: {}
  # how many events will be buffered
  event_buffer_size:  10240
  # list of event types that should be blacklisted : [ event1, event2...]
  # e.g.: [[msg-probe, other-failed, other-timeout, other-ok, parse-error]
  # blacklisted events will not be generated
  event_types_blst: ["msg-probe", "other-failed", "other-timeout", "other-ok", "parse-error"]
  # maximum tracked event rates
  evr_max_entries: 1048576
  # event rate max values list (if any exceeded the event will be blacklisted)
  # 0 disables a rate (e.g. for 2 rates: [20,240,0])
  evr_limits: [20,240,3600]
  # event rate time intervals for the corresponding limits and also intervals
  # on which the rates will be calculated (0 disables)
  evr_intervals: [1s,1m,1h]
  # report blacklisted events only if the number of "repetitions" is a multiple
  # of this value  and 2^k and n < evr_conseq_report_max
  # To disable exponential back-off for the blacklist re-reporting, set the
  # value to 0 or to evr_conseq_report_max.
  evr_conseq_report_min: 100
  # report blacklisted events only if the number of "repetitions" is a multiple
  # of this value (use 0 to disable)
  evr_conseq_report_max: 10000
  # event rate periodic GC interval
  evr_gc_interval: 10s
  # event rate old age: non-blst. entries idle for more then this value
  # will be GCed
  evr_gc_old_age: 300s
  # maximum runtime for each periodic GC run
  evr_gc_max_run_time: 1s
  # event rate periodic GC target: GC will stop if the number of
  # remaining entries is less then this value
  evr_gc_target: 10
  # RegDel event generation delay to work around quick reg-del re-reg
  # (in seconds). If 0 the RegDel event is generated immediately on reply.
  reg_del_delay: 0
  # extra REGISTER expiration delta for absorbing delayed re-REGISTERs
  reg_exp_delta: 30
  # maximum tracked register bindings (0 for unlimited)
  regs_max_entries: 0
  # maximum memory for register bindings (0 for unlimited)
  regs_max_mem: 0
  # ignore port number when comparing contacts (but not AORs)
  contact_ignore_port: false
  # set the encryption passphares (default empty), from which the
  # encryption key will be derived.
  # e.g.:  encryption_passphrase: "foobar"
  # If it starts with the "keystore:" prefix the passphares will be looked
  # up in the keystore (e.g.  encryption_passphrase: "keystore:pass1")
  # Note that only one of encryption_passphrase or encryption_key must be set.
  encryption_passphrase: ""
  # set encryption key (hex string, default empty)
  # e.g. encryption_key: "000102030405060708090a0b0c0d0e0f"
  # Note that only one of encryption_passphrase or encryption_key must be set.
  encryption_key: ""
  # encryption key validation salt (default empty).
  # If it starts with the "keystore:" prefix the salt will be looked
  # up in the keystore (e.g.  encryption_salt: "keystore:salt")
  # Note that if encryption is enabled, the salt _must_ be non-empty.
  encryption_salt: ""
  # turn on/off ip address encryption, default off
  # (requires a set encryption_passphrase or encryption_key)
  encrypt_ip_addresses: false
  # turn on/off URIs encryption, default off
  # (requires a set encryption_passphrase or encryption_key)
  encrypt_uris: false
  # turn on/off CallID encryption, default off
  # (requires a set encryption_passphrase or encryption_key)
  encrypt_call_ids: false
  # turn on/off UA and UAS encryption, default off
  # (requires a set encryption_passphrase or encryption_key)
  encrypt_ua: false
  # turn off geoip country iso code encryption (automatically turned on
  # by IP anonymization: encrypt_ip_addresses)
  unencrypted_country_iso: false
  # turn off geoip city id encryption (automatically turned on
  # by IP anonymization: encrypt_ip_addresses)
  unencrypted_city_id: false
  # default interval for generating statistics/counters events for stats_groups
  # with no interval (default 5min).
  # It also doubles as  keep alive interval (an empty stats event will be sent
  # if no stats event was sent during this interval).
  stats_interval: 5m
  # list of counter groups reported by the statistics events, default "all".
  # (special values: "all" or "*" and "none" or "-")
  # Format: [ "grp1"[:interval], grp2[:interval] ...]
  # E.g.: [regs:2s, calls:30s,  all:5m]
  # If no interval is specified, stats_interval is used.
  stats_groups: ["all"]
  # list of not supported config options that are safe to ignore
  # (no error if found in config, backward compatibility option
  # to allow running a config for a newer version).
  cfg_ignore_unknown: []
  # perform geoip lookup for src & dst ip, default false
  # needs also a valid geo_ip_db
  geo_ip_on: false
  # geoip database file, maxmind format, default empty
  geo_ip_db: ""
